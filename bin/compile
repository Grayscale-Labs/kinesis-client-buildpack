#!/usr/bin/env ruby
# bin/compile <build-dir> <cache-dir>

require 'fileutils'
require 'open-uri'

MAVEN_URL = 'https://repo1.maven.org/maven2'
JDK_DIR = ARGV[0]
BUILD_DIR = "#{ARGV[0]}/jars"
CACHE_DIR = "#{ARGV[1]}/#{ENV['STACK']}"

MAVEN_PACKAGES = [
 #[group id,                            artifact id,                version]
 ['software.amazon.kinesis', 'amazon-kinesis-client-multilang', '2.1.2'],
 ['software.amazon.kinesis', 'amazon-kinesis-client', '2.1.2'],
 ['software.amazon.awssdk', 'kinesis', '2.4.0'],
 ['software.amazon.awssdk', 'aws-cbor-protocol', '2.4.0'],
 ['com.fasterxml.jackson.dataformat', 'jackson-dataformat-cbor', '2.9.8'],
 ['software.amazon.awssdk', 'aws-json-protocol', '2.4.0'],
 ['software.amazon.awssdk', 'dynamodb', '2.4.0'],
 ['software.amazon.awssdk', 'cloudwatch', '2.4.0'],
 ['software.amazon.awssdk', 'netty-nio-client', '2.4.0'],
 ['io.netty', 'netty-codec-http', '4.1.32.Final'],
 ['io.netty', 'netty-codec-http2', '4.1.32.Final'],
 ['io.netty', 'netty-codec', '4.1.32.Final'],
 ['io.netty', 'netty-transport', '4.1.32.Final'],
 ['io.netty', 'netty-resolver', '4.1.32.Final'],
 ['io.netty', 'netty-common', '4.1.32.Final'],
 ['io.netty', 'netty-buffer', '4.1.32.Final'],
 ['io.netty', 'netty-handler', '4.1.32.Final'],
 ['io.netty', 'netty-transport-native-epoll', '4.1.32.Final'],
 ['io.netty', 'netty-transport-native-unix-common', '4.1.32.Final'],
 ['com.typesafe.netty', 'netty-reactive-streams-http', '2.0.0'],
 ['com.typesafe.netty', 'netty-reactive-streams', '2.0.0'],
 ['org.reactivestreams', 'reactive-streams', '1.0.2'],
 ['com.google.guava', 'guava', '26.0-jre'],
 ['com.google.code.findbugs', 'jsr305', '3.0.2'],
 ['org.checkerframework', 'checker-qual', '2.5.2'],
 ['com.google.errorprone', 'error_prone_annotations', '2.1.3'],
 ['com.google.j2objc', 'j2objc-annotations', '1.1'],
 ['org.codehaus.mojo', 'animal-sniffer-annotations', '1.14'],
 ['com.google.protobuf', 'protobuf-java', '2.6.1'],
 ['org.apache.commons', 'commons-lang3', '3.8.1'],
 ['org.slf4j', 'slf4j-api', '1.7.25'],
 ['io.reactivex.rxjava2', 'rxjava', '2.1.14'],
 ['software.amazon.awssdk', 'sts', '2.4.0'],
 ['software.amazon.awssdk', 'aws-query-protocol', '2.4.0'],
 ['software.amazon.awssdk', 'protocol-core', '2.4.0'],
 ['software.amazon.awssdk', 'profiles', '2.4.0'],
 ['software.amazon.awssdk', 'sdk-core', '2.4.0'],
 ['com.fasterxml.jackson.core', 'jackson-core', '2.9.8'],
 ['com.fasterxml.jackson.core', 'jackson-databind', '2.9.8'],
 ['software.amazon.awssdk', 'auth', '2.4.0'],
 ['software.amazon', 'flow', '1.7'],
 ['software.amazon.awssdk', 'http-client-spi', '2.4.0'],
 ['software.amazon.awssdk', 'regions', '2.4.0'],
 ['com.fasterxml.jackson.core', 'jackson-annotations', '2.9.0'],
 ['software.amazon.awssdk', 'annotations', '2.4.0'],
 ['software.amazon.awssdk', 'utils', '2.4.0'],
 ['software.amazon.awssdk', 'aws-core', '2.4.0'],
 ['software.amazon.awssdk', 'apache-client', '2.4.0'],
 ['org.apache.httpcomponents', 'httpclient', '4.5.6'],
 ['commons-codec', 'commons-codec', '1.10'],
 ['org.apache.httpcomponents', 'httpcore', '4.4.10'],
 ['com.amazonaws', 'aws-java-sdk-core', '1.11.477'],
 ['commons-logging', 'commons-logging', '1.1.3'],
 ['software.amazon.ion', 'ion-java', '1.0.2'],
 ['joda-time', 'joda-time', '2.8.1'],
 ['ch.qos.logback', 'logback-classic', '1.2.3'],
 ['ch.qos.logback', 'logback-core', '1.2.3'],
 ['com.beust', 'jcommander', '1.72'],
 ['commons-io', 'commons-io', '2.6'],
 ['org.apache.commons', 'commons-collections4', '4.2'],
 ['commons-beanutils', 'commons-beanutils', '1.9.3'],
 ['commons-collections', 'commons-collections', '3.2.2']
]

def install_java(jdk_dir)
  script_dir = File.dirname(__FILE__)
  script = File.join(File.expand_path(script_dir), 'install_java')
  result = %x(#{script} #{jdk_dir})
  unless $? == 0
    puts("Error while installing Java:\n#{result}")
    fail("Failed to install Java...exiting")
  end
end

def ensure_directory(path)
  unless File.directory?(path)
    FileUtils.mkdir_p(path)
  end
end

def jar_name(_, artifact_id, version)
  "#{artifact_id}-#{version}.jar"
end

def jar_url(group_id, artifact_id, version)
  group_path = group_id.gsub(/\./, '/')
  jar_name = jar_name(group_id, artifact_id, version)
  "#{MAVEN_URL}/#{group_path}/#{artifact_id}/#{version}/#{jar_name}"
end

def download_maven_jar(group_id, artifact_id, version)
  jar_name = jar_name(group_id, artifact_id, version)
  jar_url = jar_url(group_id, artifact_id, version)
  cached_jar_file = File.join(CACHE_DIR, jar_name)
  File.open(cached_jar_file, 'wb') do |saved_file|
    open(jar_url, 'rb') do |read_file|
      saved_file.write(read_file.read)
    end
  end
end

def download_jars_if_needed
  MAVEN_PACKAGES.each do |jar|
    jar_name = jar_name(*jar)
    cached_jar_file = File.join(CACHE_DIR, jar_name)
    if !File.exist?(cached_jar_file)
      puts("Downloading '#{cached_jar_file}' from Maven...")
      download_maven_jar(*jar)
    end
  end
end

def copy_jars_to_app
  MAVEN_PACKAGES.each do |jar|
    jar_name = jar_name(*jar)
    cached_jar_file = File.join(CACHE_DIR, jar_name)
    app_jar_file = File.join(BUILD_DIR, jar_name)
    puts("Copying '#{jar_name}'...")
    FileUtils.cp(cached_jar_file, app_jar_file)
  end
end

install_java(JDK_DIR)
ensure_directory(BUILD_DIR)
ensure_directory(CACHE_DIR)
download_jars_if_needed
copy_jars_to_app

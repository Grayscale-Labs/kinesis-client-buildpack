#!/usr/bin/env ruby
# bin/compile <build-dir> <cache-dir>

require 'fileutils'
require 'open-uri'

MAVEN_URL = 'https://repo1.maven.org/maven2'
BUILD_DIR = "#{ARGV[0]}/jars"
CACHE_DIR = "#{ARGV[1]}/#{ENV['STACK']}"

MAVEN_PACKAGES = [
 #[group id,                            artifact id,                version]
  ['com.amazonaws',                     'amazon-kinesis-client',    '1.8.1'],
  ['com.amazonaws',                     'aws-java-sdk-cloudwatch',  '1.11.171'],
  ['com.amazonaws',                     'aws-java-sdk-core',        '1.11.171'],
  ['com.amazonaws',                     'aws-java-sdk-dynamodb',    '1.11.171'],
  ['com.amazonaws',                     'aws-java-sdk-kinesis',     '1.11.171'],
  ['com.amazonaws',                     'aws-java-sdk-kms',         '1.11.171'],
  ['com.amazonaws',                     'aws-java-sdk-s3',          '1.11.171'],
  ['com.amazonaws',                     'jmespath-java',            '1.11.171'],
  ['com.fasterxml.jackson.core',        'jackson-annotations',      '2.6.0'],
  ['com.fasterxml.jackson.core',        'jackson-core',             '2.6.7'],
  ['com.fasterxml.jackson.core',        'jackson-databind',         '2.6.7.1'],
  ['com.fasterxml.jackson.dataformat',  'jackson-dataformat-cbor',  '2.6.7'],
  ['com.google.guava',                  'guava',                    '18.0'],
  ['com.google.protobuf',               'protobuf-java',            '2.6.1'],
  ['commons-codec',                     'commons-codec',            '1.9'],
  ['commons-lang',                      'commons-lang',             '2.6'],
  ['commons-logging',                   'commons-logging',          '1.1.3'],
  ['joda-time',                         'joda-time',                '2.8.1'],
  ['org.apache.httpcomponents',         'httpclient',               '4.5.2'],
  ['org.apache.httpcomponents',         'httpcore',                 '4.4.4'],
  ['software.amazon.ion',               'ion-java',                 '1.0.2'],
]

def ensure_directory(path)
  unless File.directory?(path)
    FileUtils.mkdir_p(path)
  end
end

def jar_name(_, artifact_id, version)
  "#{artifact_id}-#{version}.jar"
end

def jar_url(group_id, artifact_id, version)
  group_path = group_id.gsub(/\./, '/')
  jar_name = jar_name(group_id, artifact_id, version)
  "#{MAVEN_URL}/#{group_path}/#{artifact_id}/#{version}/#{jar_name}"
end

def download_maven_jar(group_id, artifact_id, version)
  jar_name = jar_name(group_id, artifact_id, version)
  jar_url = jar_url(group_id, artifact_id, version)
  cached_jar_file = File.join(CACHE_DIR, jar_name)
  File.open(cached_jar_file, 'wb') do |saved_file|
    open(jar_url, 'rb') do |read_file|
      saved_file.write(read_file.read)
    end
  end
end

def download_jars_if_needed
  MAVEN_PACKAGES.each do |jar|
    jar_name = jar_name(*jar)
    cached_jar_file = File.join(CACHE_DIR, jar_name)
    if !File.exist?(cached_jar_file)
      puts("Downloading '#{cached_jar_file}' from Maven...")
      download_maven_jar(*jar)
    end
  end
end

def copy_jars_to_app
  MAVEN_PACKAGES.each do |jar|
    jar_name = jar_name(*jar)
    cached_jar_file = File.join(CACHE_DIR, jar_name)
    app_jar_file = File.join(BUILD_DIR, jar_name)
    puts("Copying '#{jar_name}'...")
    FileUtils.cp(cached_jar_file, app_jar_file)
  end
end

ensure_directory(BUILD_DIR)
ensure_directory(CACHE_DIR)
download_jars_if_needed
copy_jars_to_app
